AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  burger-api-sam

  Sample SAM Template for burger-api-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Architectures:
        - x86_64
    CodeUri: api/
    Environment:
        Variables:
          DATABASE_URL: postgresql://postgres:docker@172.20.0.2:5432/sam-challenge?schema=public
    Runtime: nodejs20.x
    Timeout: 3
  Api:
    OpenApiVersion: '3.0.0'

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'http://localhost:5173'"
        AllowMethods: "'OPTIONS,POST,GET,PATCH,DELETE'"
        AllowCredentials: "'true'"
        MaxAge: "'3600'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'http://localhost:5173'"
              Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PATCH,DELETE'"
              Access-Control-Allow-Credentials: "'true'"
        DEFAULT_5xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'http://localhost:5173'"
              Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PATCH,DELETE'"
              Access-Control-Allow-Credentials: "'true'"

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 15.5
      MasterUsername: postgres
      MasterUserPassword: docker
      DBInstanceIdentifier: sam-challenge
      PubliclyAccessible: true
      DBName: postgres

  CreateIngredientFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.createIngredientHandler
      Events:
        CreateIngredient:
          Type: Api
          Properties:
            Path: /ingredients
            Method: post
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  FetchAllIngredientsFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.fetchAllIngredientsHandler
      Events:
        FetchAllIngredients:
          Type: Api
          Properties:
            Path: /ingredients
            Method: get
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  UpdateIngredientFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.updateIngredientHandler
      Events:
        UpdateIngredient:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: patch
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  DeleteIngredientFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.deleteIngredientHandler
      Events:
        DeleteIngredient:
          Type: Api
          Properties:
            Path: /ingredients/{id}
            Method: delete
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  CreateSnackFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.createSnackHandler
      Events:
        CreateSnack:
          Type: Api
          Properties:
            Path: /snacks
            Method: post
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  DeleteSnackFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.deleteSnackHandler
      Events:
        DeleteSnack:
          Type: Api
          Properties:
            Path: /snacks/{id}
            Method: delete
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  FetchAllSnacksFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.fetchAllSnacksHandler
      Events:
        FetchAllSnacks:
          Type: Api
          Properties:
            Path: /snacks
            Method: get
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  CreateOrderFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.createOrderHandler
      Events:
        CreateOrder:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  FetchAllOrdersFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.fetchAllOrdersHandler
      Events:
        FetchAllOrders:
          Type: Api
          Properties:
            Path: /orders
            Method: get
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

  DeleteAllOrdersFunction:
    Type: AWS::Serverless::Function
    DependsOn: DBInstance
    Properties:
      Handler: app.deleteAllOrdersHandler
      Events:
        DeleteAllOrders:
          Type: Api
          Properties:
            Path: /orders
            Method: delete
            RestApiId: !Ref Api

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
        Loader:
        - .prisma=file
        - .so.node=file
        AssetNames: '[name]'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CreateIngredientFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn